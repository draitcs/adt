           
              
PROGRAM 1
#include<stdio.h>
#include<conio.h>
#include<time.h>
#include<dos.h>
void bubblesort(int a[10000],int n)
{
    int i,j,temp;
    for(i=1;i<n;i++)
    {
       for(j=0;j<n-i;j++)
       {
	  if(a[j]>a[j+1])
	  {
	    temp=a[j];
	    a[j]=a[j+1];
	    a[j+1]=temp;
	  }
       }
    }
    delay(1);
}
void main()
{
    int a[10000],n,i;
    float res;
    clock_t end,start;
    clrscr();
    printf("Enter size of the array\n");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
       a[i]=rand();
    }
    printf("The Unsorted Array is\n");
    for(i=0;i<n;i++)
    {
       printf("\n%d",a[i]);
    }
    start=clock();
    bubblesort(a,n);
    end=clock();
    res=(end-start)/CLK_TCK;
    printf("The Sorted array is\n");
    for(i=0;i<n;i++)
    {
       printf("\n%d",a[i]);
    }
    printf("\nThe time taken to sort %d elements is %f",n,res);
    getch();
}

























// Algorithm for Selection Sort
PROGRAM


#include<stdio.h>
#include<conio.h>
#include<time.h>
#include<dos.h>
void selectionsort(int a[10000],int n)
{
    int i,j,min,temp,pos;
    for(i=0;i<n-1;i++)
    {
       	min=a[i];
       	pos=i;
       	for(j=i+1;j<n;j++)
       	{
	 	if(a[j]<min)
	  	{
	    		min=a[j];
          		pos=j;
	 	 }
     	}
       	temp=a[i];
       	a[i]=a[pos];
       	a[pos]=temp;
    }
    delay(1);
}
void main()
{
    int a[10000],n,i;
    float res;
    clock_t end,start;
    clrscr();
    printf("Enter size of the array\n");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
       a[i]=rand();
    }
    printf("The Unsorted Array is\n");
    for(i=0;i<n;i++)
    {
       printf("\n%d",a[i]);
    }
    start=clock();
    selectionsort(a,n);
    end=clock();
    res=(end-start)/CLK_TCK;
    printf("The Sorted array is\n");

    for(i=0;i<n;i++)
    {
       printf("\n%d",a[i]);
    }
    printf("\nThe time taken to sort %d elements is %f",n,res);
    getch();
}




quicksort
PROGRAM

#include<stdio.h>
#include<conio.h>



#include<stdlib.h>
#include<math.h>
#include<time.h>
#include<dos.h>

int partition(int a[],int low,int high)
{
	int temp,key,i,j;
	key=a[low];
	i=low;
	j=high+1;
	while(i<=j)
	{
		do i=i+1; while(key>=a[i]);
		do j=j-1; while(key<a[j]);
		if (i<j)
		{
			temp=a[i];
			a[i]=a[j];
			a[j]=temp;
		}
	}
	temp=a[low];
	a[low]=a[j];
	a[j]=temp;
	return j;
}

void quicksort(int a[],int low,int high)
{
	int k;
	if(low<high)
	{
		k=partition(a,low,high);
		quicksort(a,low,k-1);	
		quicksort(a,k+1,high);
	}
	delay(1);
}

void main()
{
	int a[10000],n,i,mid,low,high;
	float res;
	clock_t end,start;
	clrscr();
	printf("Enter the size of an array\n");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		a[i]=rand();
	}
	/*print the unsorted array only for 10 elements taking n=10 in the begining*/
	printf("The unsorted array is\n");
	for(i=0;i<n;i++)
	{
		printf("%d\n",a[i]);
	}
	low=0;
	high=n-1;
	start=clock();
	quicksort(a,low,high);
	end=clock();
	/*print the sorted array only for 10 elements taking n=10 in the begining*/
	printf("The sorted array is\n");
	for(i=0;i<n;i++)
	{
		printf("%d\n",a[i]);
	}
	res=(end-start)/CLK_TCK;
	printf("Time taken to sort to %d elements is %f\n",n,res);
	getch();
}













/*Algorithm for Mergesort*/

Algorithm mergesort(a,low,high)


PROGRAM

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
#include<dos.h>

void simplemerge(int a[],int low,int mid,int high)
{
	int i,j,k,c[10000];
	i=low;
	j=mid+1;
	k=low;
	while(i<=mid && j<=high)
	{
		if(a[i]<a[j])
		{
			c[k]=a[i];
			i++;
			k++;
		}
		else
		{
			c[k]=a[j];
			j++;
			k++;
		}
	}
	while(i<=mid)
	{
		c[k]=a[i];
		i++;
		k++;

	}
	while(j<=mid)
	{
		c[k]=a[j];
		j++;
		k++;

	}
	for(i=low;i<high;i++)
	{
		a[i]=c[i];
	}
}


void mergesort(int a[],int low,int high)
{
	int mid;
	if(low<high)
	{
		mid=(low+high)/2;
		mergesort(a,low,mid);
		mergesort(a,mid+1,high);
		simplemerge(a,low,mid,high);
		delay(1);
	}
}

void main()
{
	int a[10000],n,i,mid,low,high;
	float res;
	clock_t end,start;
	clrscr();
	printf("Enter the size of an array\n");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		a[i]=rand();
	}
	/*print the unsorted array only for 10 elements taking n=10 in the begining*/
	printf("The unsorted array is\n");
	for(i=0;i<n;i++)
	{
		printf("%d\n",a[i]);
	}
	low=0;
	high=n-1;
	start=clock();
	mergesort(a,low,high);
	end=clock();
	/*print the sorted array only for 10 elements taking n=10 in the begining*/
	printf("The sorted array is\n");
	for(i=0;i<n;i++)
	{
		printf("%d\n",a[i]);
	}
	res=(end-start)/CLK_TCK;
	printf("Time taken to sort to %d elements is %f\n",n,res);
	getch();
}

























4. From a given vertex in a weighted connected graph, find shortest paths to other vertices using Dijkstra's algorithm.


PROGRAM

#include<stdio.h>
#include<conio.h>
void dijkstra(int cost[10][10],int n,int src,int dist[10])
{
	int vis[10],u,min,i,j,p[10];
	for(i=0;i<n;i++)
	{
		dist[i]=cost[src][i];
		vis[i]=0;
		p[i]=src;
	}
	vis[src]=1;
	for(i=0;i<n;i++)
	{
		min=999;
		for(j=0;j<n;j++)
		{
			if(vis[j]==0 && dist[j]<min)
			{
				min=dist[j];
				u=j;
			}
		}
		vis[u]=1;
		for(j=0;j<n;j++)
		{
			if(vis[j]==0 && (dist[u]+cost[u][j]<dist[j]))
			{
				dist[j]=dist[u]+cost[u][j];
				p[j]=u;
			}
		}
	}
	for(i=0;i<n;i++)
	{
		printf("\n\nShortest path from %d to %d\n",src,i);
		j=i;
		while(j!=src)
		{
			printf("%d <- ",j);
			j=p[j];
		}
		printf("%d",j);
		printf("::Cost=%d\n",dist[i]);
	}
}

void main()
{
	int cost[10][10],n,src,dist[10],i,j;
	clrscr();
	printf("\n\n\n\n\n\n\n Enter the number of vertices:\n");
	scanf("%d",&n);
	printf("\n Enter the cost matrix:\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			scanf("%d",&cost[i][j]);
		}
	}
	printf("\n Enter the source vertex:");
	scanf("%d",&src);
	dijkstra(cost,n,src,dist);
	getch();
}

5. Find Minimum Cost Spanning Tree of a given undirected graph using Kruskal's algorithm

	
PROGRAM

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

int  ﬁnd(int v, int p[100])
{
while(p[v]!=v) 
v=p[v]; 
return  v;
}

void kruskal( int cost[100][100], int n)
{
	int  i,j,k,u,v,sum,t[100][2],p[100],mincost,count;
	count=0;
k=0;
sum=0;
	
	for(i=0;i<n;i++)
	{	
		p[i]=i;
	}
	
while(count<n-1)
{
mincost=999;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if((cost[i][j]!=0) && (cost[i][j]<mincost))
{
mincost=cost[i][j];
u=i;
v=j;
} 
}
}

if(mincost==999)
	break;
i=ﬁnd(u,p);
j=ﬁnd(v,p); 
if(i!=j)
{
	t[k][0]=u;
	t[k][1] =v;
	k++;
	count=count+1;
	sum=sum+mincost;
	if(i<j)
		p[j]=i;
	else
		p[i]=i;
}
cost[u][v]=cost[v][u]=999;
}
if(count==n-1)
	{
printf("\nThe  edges  of  Minimum  Cost  Spanning  Tree  are\n\n");
		for(i=0;i<n-1;i++)
		{
printf("\n%d  ->%d  ",t[k][0],t[k][1]);
		}
	printf("\n\tMinimum  cost  =  %d\n",sum);
	}
	else
	printf("\nSpanning tree does not exists");
}

void  main()
{
int i,j,cost[100][100],n;
clrscr();

printf("\n\n\tImplementation  of  Kruskal's  algorithm\n\n");
printf("\nEnter  the  no.  of  vertices\n");
scanf("%d",&n);
printf("\nEnter  the  cost  adjacency  matrix\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
scanf("%d",&cost[i][j]); 
}
}

Kruskal(cost,n);
getch();
}























6. Find Minimum Cost Spanning Tree of a given undirected graph using Prim’s algorithm
	
	PROGRAM
#include<stdio.h>
#include<conio.h>

void prim(int cost[100][100],int n,int visited[100],int p[100],int d[100])
{
	int mincost,count=0,i,j,v,source,u,t[100][2],k,sum;
	k=0;
	sum=0;
	mincost=999;
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(cost[i][j]<mincost)
			{
				mincost=cost[i][j];
				source=i;
			}
		}
	}
	for(i=0;i<n;i++)
	{
		visited[i]=0;
		p[i]=source;
		d[i]=cost[source][i];
	}
	visited[source]=1;
	for(i=0;i<n;i++)
	{
		u=-1;
		mincost=999;
		for(j=0;j<n;j++)
		{
			if((visited[j]==0) && (d[j]<mincost))
			{
				mincost=d[j];
				u=j;
			}
		}
		if(u==-1)
		break;
		visited[u]=1;
		t[k][0]=p[u];
		t[k][1]=u;
		count++;
		k++;
		sum=sum+mincost;
		for(v=0;v<n;v++)
		{
			if((visited[v]==0) &&(cost[u][v]<d[v]))
			{
				d[v]=cost[u][v];
				p[v]=u;
			}
		}
	}
	if(count==n-1)
	{

		printf("\n Spanning tree exists\nEdges of spanning tree are:\n");
		for(i=0;i<n-1;i++)
			printf("%d->%d\n",t[i][0],t[i][1]);
		printf("Cost of spanning tree: %d",sum);
	}
	else
		printf("Spanning tree doesn't exist\n");
}

void main()
{
	int n,j,i,cost[100][100],visited[100],p[100],d[100];
	clrscr();
	printf("Enter the no. of vertices: ");
	scanf("%d",&n);
	printf("Enter the cost adjacency matrix:\n");
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)
			scanf("%d",&cost[i][j]);
	prim(cost,n,visited,p,d);
	getch();
}





















7 (a). Implement All-Pairs Shortest Paths Problem using Floyd's algorithm.
	

PROGRAM
#include<stdio.h>
#include<conio.h>

int min (int a,int b)
{
	if(a<b)
		return a;
	else
		return b;
}

void floyd(int a[10][10],int n)
{
	int d[10][10],i,j,k;
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			d[i][j]=a[i][j];
		}
}
	
for(k=0;k<n;k++)
	{
		for(i=0;i<n;i++)
		{
			for(j=0;j<n;j++)
			{
				d[i][j]=min(d[i][j],d[i][k]+d[k][j]);
			}
		}
	}
	
printf("The distance matrix is\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			printf("%d\t",d[i][j]);
		}
		printf("\n");
	}
}


void main()
{
	int n,a[10][10],i,j;
	printf("Enter the number of nodes\n ");
	scanf("%d",&n);
	printf("Enter the cost adjacency matrix\n");
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
			scanf("%d",&a[i][j]);
	}
	floyd(a,n);
	getch();
}


















7 (b). Compute the transitive closure of a given directed graph using 

PROGRAM
#include<stdio.h>
#include<conio.h>

void warshall(int a[20][20],int n)
{
	int i,j,k,p[20][20];
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			p[i][j]=a[i][j];
		}
	}
	for(k=0;k<n;k++)
	{
		for(i=0;i<n;i++)
		{
			for(j=0;j<n;j++)
			{
				if(p[i][j]==0)
				{
					if(p[i][k]==1 && p[k][j]==1)
					{
						p[i][j]=1;
					}
				}
			}
		}
	}
	
printf("The transitive closure of the graph is\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			printf("%d\t",p[i][j]);
		}
		printf("\n");
	}
}

void main()
{
	int i,j,n,a[20][20];
	clrscr();
	
printf("Enter the number of vertices\n");
	scanf("%d",&n);
	
printf("Enter the adjacency matrix\n");
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)	
		{
			scanf("%d",&a[i][j]);
		}
	}
	
warshall(a,n);
	getch();
}
















8. Implement   0/1    Knapsack   problem   using   Dynamic Programming
PROGRAM
#include<stdio.h>
#include<conio.h>

int max(int a, int b)
{
    if(a>b)
        return a;
    else
        return b;
}

void knapsack(int n,int m,int w[],int p[])
{
	int v[20][20];
	int i,j;
	for (i=0;i<=n;i++)  
	{
		for (j=0;j<=m;j++) 
		{
			if(i==0 || j==0)
				v[i][j]=0;
			else if(w[i]>j)
				v[i][j]=v[i-1][j];
			else
				v[i][j]=max(v[i-1][j],(p[i]+v[i-1][j-w[i]]));
		}
	}

	printf("The output is\n");
	for(i=0;i<=n;i++)
	{
		for(j=0;j<=m;j++)
		{
			printf("%d\t",v[i][j]);
		}
		printf("\n");
	}
	
	printf("The optimal solution is %d\n",v[n][m]);
	
}
	
void main()
{
	int n,p[10],w[10],m,i,j;
	clrscr();
	
printf("Enter the number of objects\n");
	scanf("%d",&n);
	printf("Enter the wieghts of each object\n");
	for(i=1;i<=n;i++)
		scanf("%d",&w[i]);
	printf("Enter the profit of each object\n");
	for(i=1;i<=n;i++)
		scanf("%d",&p[i]);
	printf("Enter the capacity of the knapsack\n");
	scanf("%d",&m);
	
knapsack(n,m,w,p);
	
	getch();
}
	


























10. Implement Horspool’s algorithm for String Matching using space & time trade-off concept.

PROGRAM
#include <stdio.h>
#include <string.h>
#define MAX  256

void Shifttable(char p[], int t[])
{
	int m, i, j;
	m = strlen(p);
	for(i=0; i<MAX; i++)
	{
		t[i]=m;
	}
	for(j=0; j<m-1; j++)
	{
		t[p[j]] = m-1-j;
	}
}

int Horspool(char s[],char p[],int t[])
{
	int i, n, m, k;

	n = strlen(s);
	m = strlen(p);
	i = m-1;
	while(i<n)
	{
		k = 0;
		while((k<m)&&(p[m-1-k]==s[i-k]))
			k++;
		if (k == m)
			return i-m+1;
		else
			i = i+t[s[i]];
	}
	return -1;
}

void main()
{
	char text[MAX];
	char pattern[MAX];
    int s[MAX];
	int pos;
	printf("Enter the text string : \n");
	gets(text);
	printf("Enter the pattern string : \n");
	gets(pattern);
	
	Shifttable(pattern,s);
	pos = Horspool(text,pattern,s);

	if(pos==-1)
		printf("\nPattern not found.\n");
	else
		printf("\nPattern found at position: %d\n",pos+1);

	return 0;
}










PROGRAM

#include<stdio.h>
#include<conio.h>

void nqueens(int);
int place(int[],int);
void printsolution(int,int[]);
void main()
{
	int n;
	clrscr();
	printf("Enter the no.of queens: ");
	scanf("%d",&n);
	nqueens(n);
	getch();
}
void nqueens(int n)
{
	int x[10],count=0,k=1;
	x[k]=0;
	while(k!=0)
	{
		x[k]=x[k]+1;
		while(x[k]<=n&&(!place(x,k)))
		x[k]=x[k]+1;
		if(x[k]<=n)
		{
			if(k==n)
			{
				count++;
				printf("\nSolution %d\n",count);
				printsolution(n,x);
			}
			else
			{
				k++;
				x[k]=0;
			}
		}
		 else
		{
			k--; //backtracking
		}
	}
	return;
}

int place(int x[],int k)
{
	int i;
	for(i=1;i<k;i++)
	{
		if(x[i]==x[k]||(abs(x[i]-x[k]))==abs(i-k))
		return 0;
	}
	return 1;
}
void printsolution(int n,int x[])
{
	int i,j;
	char c[10][10];
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
		c[i][j]='X';
	}	
	for(i=1;i<=n;i++)
	c[i][x[i]]='Q';
	for(i=1;i<=n;i++)
	{
		for(j=1;j<=n;j++)
		{
			printf("%c\t",c[i][j]);
		}
		printf("\n");
	}
}




#include<stdio.h>
#include<conio.h> 
int a[10] , x[10],d ; 
void sumofsub ( int , int , int ) ; 
void main () 
{  
  	int n , sum = 0;  
    	int i;  
    	clrscr ();  
    	printf ( " \n Enter the size of the set : "  ;  
    	scanf ( "%d" , &n );  
    	printf ( " \n Enter the set in increasing order:\n" );  
    	for ( i = 1 ; i <= n ; i++ )   
scanf ("%d", &a[i] );  
    	printf ( " \n Enter the value of d : \n " );   
    	scanf ( "%d" ,  &d );  
    	
for ( i = 1 ; i <= n ; i++ )   
    		sum = sum + a[i];  
    	
if ( sum < d || a[1] > d )   
    		printf ( " \n No subset possible : " );  
    	else   
    		sumofsub ( 0 , 1 , sum );  
    	getch (); 
} 

void sumofsub ( int s , int k , int r ) 
{  
int i=1 ;  x[k] = 1 ; 
    	if ( ( s + a[k] ) == d )  
    	{   
        		printf("Subset:");   
        		for ( i = 1 ; i <= k ; i++ ) 
       			if ( x[i] == 1 )     
       				printf ( "\t%d" , a[i] ) ;  
       			printf ( "\n" ) ; 

    	}  
    	else   if ( s + a[k] + a[k+1] <= d )    
    		sumofsub ( s + a[k] , k + 1 , r - a[k] ) ;   
    	if ( ( s + r - a[k] >= d ) && ( s + a[k+1] <=d ) )   
    	{    
        		x[k] = 0;    
    		sumofsub ( s , k + 1 , r - a[k] ) ;   
      	} 
}






























